IDX001:DIM1024:001|002|003|004|005|
IDX002:DIM16384:006|007|008|009|010|011|012|
IDX003:DIM1024:013|014|015|016|017|
IDX004:DIM16777216:018|019|020|021|022|023|024|025|026|027|028|029|
IDX005:DIM1099511627776:030|031|032|033|034|035|036|037|038|039|040|041|042|043|044|045|046|047|048|049|
 Solve OO-CMF with newton

 ------------------------------------------ 
 CMF CI Iter: 1
 ------------------------------------------ 
 FCIAnsatz:: #Orbs = 5   #α = 5  #β = 0  Dimension: 1        
 Slater Det Energy: -79.99731268
Overwritten attributes  conv_tol_residual  of <class 'pyscf.fci.direct_spin1.FCISolver'>
 FCIAnsatz:: #Orbs = 7   #α = 4  #β = 4  Dimension: 1225     
 FCIAnsatz:: #Orbs = 5   #α = 5  #β = 0  Dimension: 1        
 Slater Det Energy: -63.40478160
┌ Warning: Error requiring `KrylovKit` from `LinearSolve`
│   exception =
│    LoadError: ArgumentError: Package LinearSolve does not have KrylovKit in its dependencies:
│    - You may have a partially installed environment. Try `Pkg.instantiate()`
│      to ensure all packages in the environment are installed.
│    - Or, if you have LinearSolve checked out for development and have
│      added KrylovKit as a dependency but haven't updated your primary
│      environment's manifest file, try `Pkg.resolve()`.
│    - Otherwise you may need to report an issue with LinearSolve
│    Stacktrace:
│      [1] macro expansion
│        @ ./loading.jl:1167 [inlined]
│      [2] macro expansion
│        @ ./lock.jl:223 [inlined]
│      [3] require(into::Module, mod::Symbol)
│        @ Base ./loading.jl:1144
│      [4] include(mod::Module, _path::String)
│        @ Base ./Base.jl:419
│      [5] include(x::String)
│        @ LinearSolve ~/.conda/envs/bst/share/julia/packages/LinearSolve/Rq2MY/src/LinearSolve.jl:1
│      [6] macro expansion
│        @ ~/.julia/packages/Requires/Z8rfN/src/Requires.jl:40 [inlined]
│      [7] top-level scope
│        @ ~/.conda/envs/bst/share/julia/packages/LinearSolve/Rq2MY/src/init.jl:13
│      [8] eval
│        @ ./boot.jl:368 [inlined]
│      [9] eval
│        @ ~/.conda/envs/bst/share/julia/packages/LinearSolve/Rq2MY/src/LinearSolve.jl:1 [inlined]
│     [10] (::LinearSolve.var"#74#86")()
│        @ LinearSolve ~/.julia/packages/Requires/Z8rfN/src/require.jl:101
│     [11] macro expansion
│        @ timing.jl:382 [inlined]
│     [12] err(f::Any, listener::Module, modname::String, file::String, line::Any)
│        @ Requires ~/.julia/packages/Requires/Z8rfN/src/require.jl:47
│     [13] (::LinearSolve.var"#73#85")()
│        @ LinearSolve ~/.julia/packages/Requires/Z8rfN/src/require.jl:100
│     [14] withpath(f::Any, path::String)
│        @ Requires ~/.julia/packages/Requires/Z8rfN/src/require.jl:37
│     [15] (::LinearSolve.var"#72#84")()
│        @ LinearSolve ~/.julia/packages/Requires/Z8rfN/src/require.jl:99
│     [16] listenpkg(f::Any, pkg::Base.PkgId)
│        @ Requires ~/.julia/packages/Requires/Z8rfN/src/require.jl:20
│     [17] macro expansion
│        @ ~/.julia/packages/Requires/Z8rfN/src/require.jl:98 [inlined]
│     [18] __init__()
│        @ LinearSolve ~/.conda/envs/bst/share/julia/packages/LinearSolve/Rq2MY/src/init.jl:12
│     [19] _include_from_serialized(pkg::Base.PkgId, path::String, depmods::Vector{Any})
│        @ Base ./loading.jl:831
│     [20] _tryrequire_from_serialized(modkey::Base.PkgId, path::String, sourcepath::String, depmods::Vector{Any})
│        @ Base ./loading.jl:938
│     [21] _require_search_from_serialized(pkg::Base.PkgId, sourcepath::String, build_id::UInt64)
│        @ Base ./loading.jl:1028
│     [22] _require(pkg::Base.PkgId)
│        @ Base ./loading.jl:1315
│     [23] _require_prelocked(uuidkey::Base.PkgId)
│        @ Base ./loading.jl:1200
│     [24] macro expansion
│        @ ./loading.jl:1180 [inlined]
│     [25] macro expansion
│        @ ./lock.jl:223 [inlined]
│     [26] require(into::Module, mod::Symbol)
│        @ Base ./loading.jl:1144
│     [27] include(mod::Module, _path::String)
│        @ Base ./Base.jl:419
│     [28] exec_options(opts::Base.JLOptions)
│        @ Base ./client.jl:303
│     [29] _start()
│        @ Base ./client.jl:522
│    in expression starting at /home/arnab22/.conda/envs/bst/share/julia/packages/LinearSolve/Rq2MY/ext/LinearSolveKrylovKitExt.jl:1
└ @ Requires ~/.julia/packages/Requires/Z8rfN/src/require.jl:51
ERROR: LoadError: BoundsError: attempt to access 17×17 Matrix{Float64} at index [Int16[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], Int16[18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]
Stacktrace:
  [1] throw_boundserror(A::Matrix{Float64}, I::Tuple{Vector{Int16}, Vector{Int16}})
    @ Base ./abstractarray.jl:703
  [2] checkbounds
    @ ./abstractarray.jl:668 [inlined]
  [3] view
    @ ./subarray.jl:177 [inlined]
  [4] subset(ints::InCoreInts{Float64}, list::Vector{Int16})
    @ InCoreIntegrals ~/.julia/packages/InCoreIntegrals/gchqq/src/subsets.jl:16
  [5] subset(ints::InCoreInts{Float64}, ci::MOCluster, rdm1::RDM1{Float64})
    @ RDM ~/.julia/packages/RDM/OVzNC/src/subsets.jl:18
  [6] cmf_ci_iteration(ints::InCoreInts{Float64}, clusters::Vector{MOCluster}, in_rdm1::RDM1{Float64}, fspace::Vector{Tuple{Int64, Int64}}, ansatze::Vector{FCIAnsatz}; use_pyscf::Bool, verbose::Int64, sequential::Bool, spin_avg::Bool, tol_ci::Float64, maxiter_ci::Int64)
    @ ClusterMeanField ~/.conda/envs/bst/share/julia/packages/ClusterMeanField/AqzpH/src/incore_cmf.jl:230
  [7] cmf_ci(ints::InCoreInts{Float64}, clusters::Vector{MOCluster}, fspace::Vector{Tuple{Int64, Int64}}, ansatze::Vector{FCIAnsatz}, in_rdm1::RDM1{Float64}; maxiter_ci::Int64, maxiter_d1::Int64, tol_d1::Float64, tol_ci::Float64, verbose::Int64, use_pyscf::Bool, sequential::Bool)
    @ ClusterMeanField ~/.conda/envs/bst/share/julia/packages/ClusterMeanField/AqzpH/src/incore_cmf.jl:459
  [8] (::ClusterMeanField.var"#step!#34"{Int64, Int64, Float64, Float64, Int64, Bool, Bool, Vector{MOCluster}, Vector{Tuple{Int64, Int64}}, Vector{FCIAnsatz}})(ints::InCoreInts{Float64}, d1::RDM1{Float64}, k::Vector{Float64})
    @ ClusterMeanField ~/.conda/envs/bst/share/julia/packages/ClusterMeanField/AqzpH/src/incore_cmf.jl:1678
  [9] cmf_oo_newton(ints_in::InCoreInts{Float64}, clusters::Vector{MOCluster}, fspace::Vector{Tuple{Int64, Int64}}, ansatze::Vector{FCIAnsatz}, dguess::RDM1{Float64}; maxiter_oo::Int64, maxiter_ci::Int64, maxiter_d1::Int64, tol_oo::Float64, tol_d1::Float64, tol_ci::Float64, verbose::Int64, step_trust_region::Float64, use_pyscf::Bool, zero_intra_rots::Bool, sequential::Bool, trust_region::Bool, use_linearsolve::Bool)
    @ ClusterMeanField ~/.conda/envs/bst/share/julia/packages/ClusterMeanField/AqzpH/src/incore_cmf.jl:1711
 [10] top-level scope
    @ /localscratch/2363473/cmf_newton.jl:32
in expression starting at /localscratch/2363473/cmf_newton.jl:32
 FCIAnsatz:: #Orbs = 12  #α = 12 #β = 12 Dimension: 1        
